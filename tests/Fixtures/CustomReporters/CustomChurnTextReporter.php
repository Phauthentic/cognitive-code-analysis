<?php

declare(strict_types=1);

namespace Phauthentic\CognitiveCodeAnalysis\Tests\Fixtures\CustomReporters;

use Phauthentic\CognitiveCodeAnalysis\Business\Churn\ChurnMetricsCollection;
use Phauthentic\CognitiveCodeAnalysis\Business\Churn\Report\ReportGeneratorInterface;

/**
 * Custom text reporter for churn data testing
 */
class CustomChurnTextReporter implements ReportGeneratorInterface
{
    public function export(ChurnMetricsCollection $metrics, string $filename): void
    {
        $content = $this->generateReport($metrics);
        file_put_contents($filename, $content);
    }

    private function generateReport(ChurnMetricsCollection $metrics): string
    {
        $output = "=== Custom Churn Analysis Report ===\n";
        $output .= "Generated by CustomChurnTextReporter\n\n";

        $output .= "Analysis Summary:\n";
        $output .= "Total Classes: " . count($metrics) . "\n";

        $totalMethods = 0;
        foreach ($metrics as $metric) {
            // Count methods based on score (simplified)
            $totalMethods += (int)$metric->getScore();
        }
        $output .= "Total Methods: " . $totalMethods . "\n\n";

        $output .= "Churn Analysis Results:\n";
        $output .= str_repeat("-", 50) . "\n";

        foreach ($metrics as $metric) {
            $output .= "Class: " . $metric->getClassName() . "\n";
            $output .= "  File: " . $metric->getFile() . "\n";
            $output .= "  Score: " . $metric->getScore() . "\n";
            $output .= "  Churn: " . $metric->getChurn() . "\n";
            $output .= "  Times Changed: " . $metric->getTimesChanged() . "\n";

            if ($metric->hasCoverageData()) {
                $output .= "  Coverage: " . ($metric->getCoverage() * 100) . "%\n";
                $output .= "  Risk Churn: " . $metric->getRiskChurn() . "\n";
                $output .= "  Risk Level: " . $metric->getRiskLevel() . "\n";
            }

            $output .= "\n";
        }

        return $output;
    }
}
