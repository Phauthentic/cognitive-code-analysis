<?php

declare(strict_types=1);

namespace Tests\Fixtures\CustomReporters;

use Phauthentic\CognitiveCodeAnalysis\Business\Cognitive\Report\ReportGeneratorInterface;
use Phauthentic\CognitiveCodeAnalysis\Business\Cognitive\CognitiveMetricsCollection;
use Phauthentic\CognitiveCodeAnalysis\Config\CognitiveConfig;
use Phauthentic\CognitiveCodeAnalysis\CognitiveAnalysisException;

/**
 * Config-aware custom text reporter for testing integration with CLI commands.
 * Demonstrates how to use CognitiveConfig in custom reporters.
 */
class ConfigAwareTextReporter implements ReportGeneratorInterface
{
    private CognitiveConfig $config;

    public function __construct(CognitiveConfig $config)
    {
        $this->config = $config;
    }

    public function export(CognitiveMetricsCollection $metrics, string $filename): void
    {
        // Ensure directory exists
        $directory = dirname($filename);
        if (!is_dir($directory)) {
            throw new CognitiveAnalysisException("Directory {$directory} does not exist");
        }

        // Generate text content with config information
        $content = $this->generateTextContent($metrics);

        // Write to file
        if (file_put_contents($filename, $content) === false) {
            throw new CognitiveAnalysisException("Could not write to file: {$filename}");
        }
    }

    private function generateTextContent(CognitiveMetricsCollection $metrics): string
    {
        $content = "=== Config-Aware Cognitive Complexity Report ===\n";
        $content .= "Generated by ConfigAwareTextReporter\n";
        $content .= "===============================================\n\n";

        // Include config information
        $content .= "Configuration:\n";
        $content .= sprintf("- Score Threshold: %.2f\n", $this->config->scoreThreshold);
        $content .= sprintf("- Group By Class: %s\n", $this->config->groupByClass ? 'Yes' : 'No');
        $content .= sprintf(
            "- Show Only Methods Exceeding Threshold: %s\n",
            $this->config->showOnlyMethodsExceedingThreshold ? 'Yes' : 'No'
        );
        $content .= "\n";

        $totalMethods = 0;
        $totalScore = 0.0;
        $methodsAboveThreshold = 0;

        foreach ($metrics as $metric) {
            $isAboveThreshold = $metric->getScore() > $this->config->scoreThreshold;
            $thresholdIndicator = $isAboveThreshold ? ' [ABOVE THRESHOLD]' : '';

            $content .= sprintf(
                "Class: %s, Method: %s, Score: %.2f%s\n",
                $metric->getClass(),
                $metric->getMethod(),
                $metric->getScore(),
                $thresholdIndicator
            );

            $totalMethods++;
            $totalScore += $metric->getScore();

            if ($isAboveThreshold) {
                $methodsAboveThreshold++;
            }
        }

        $content .= "\n===============================================\n";
        $content .= sprintf("Total Methods: %d\n", $totalMethods);
        $content .= sprintf("Average Score: %.2f\n", $totalMethods > 0 ? $totalScore / $totalMethods : 0);
        $content .= sprintf(
            "Methods Above Threshold (%.2f): %d\n",
            $this->config->scoreThreshold,
            $methodsAboveThreshold
        );
        $content .= "===============================================\n";

        return $content;
    }
}
