<?php

declare(strict_types=1);

namespace Phauthentic\CognitiveCodeAnalysis\Tests\Fixtures\CustomReporters;

use Phauthentic\CognitiveCodeAnalysis\Business\Churn\ChurnMetricsCollection;
use Phauthentic\CognitiveCodeAnalysis\Business\Churn\Report\ReportGeneratorInterface;
use Phauthentic\CognitiveCodeAnalysis\Config\CognitiveConfig;

/**
 * Config-aware custom text reporter for churn data testing
 */
class ConfigAwareChurnTextReporter implements ReportGeneratorInterface
{
    public function __construct(
        private readonly CognitiveConfig $config
    ) {
    }

    public function export(ChurnMetricsCollection $metrics, string $filename): void
    {
        $content = $this->generateReport($metrics);
        file_put_contents($filename, $content);
    }

    private function generateReport(ChurnMetricsCollection $metrics): string
    {
        $output = "=== Config-Aware Churn Analysis Report ===\n";
        $output .= "Generated by ConfigAwareChurnTextReporter\n\n";

        $output .= "Configuration:\n";
        $output .= "Score Threshold: " . $this->config->scoreThreshold . "\n";
        $output .= "Group By Class: " . ($this->config->groupByClass ? 'Yes' : 'No') . "\n";
        $output .= "Show Only Methods Exceeding Threshold: " . ($this->config->showOnlyMethodsExceedingThreshold ? 'Yes' : 'No') . "\n\n";

        $output .= "Analysis Summary:\n";
        $output .= "Total Classes: " . count($metrics) . "\n";

        $totalMethods = 0;
        foreach ($metrics as $metric) {
            // Count methods based on score (simplified)
            $totalMethods += (int)$metric->getScore();
        }
        $output .= "Total Methods: " . $totalMethods . "\n\n";

        $output .= "Churn Analysis Results:\n";
        $output .= str_repeat("-", 50) . "\n";

        $aboveThresholdCount = 0;

        foreach ($metrics as $metric) {
            $score = $metric->getScore();
            $isAboveThreshold = $score > $this->config->scoreThreshold;

            if ($isAboveThreshold) {
                $aboveThresholdCount++;
                $output .= "Class: " . $metric->getClassName() . " [ABOVE THRESHOLD]\n";
            } else {
                $output .= "Class: " . $metric->getClassName() . "\n";
            }

            $output .= "File: " . $metric->getFile() . "\n";
            $output .= "Score: " . $metric->getScore() . "\n";
            $output .= "Churn: " . $metric->getChurn() . "\n";
            $output .= "Times Changed: " . $metric->getTimesChanged() . "\n";

            if ($metric->hasCoverageData()) {
                $output .= "Coverage: " . ($metric->getCoverage() * 100) . "%\n";
                $output .= "Risk Level: " . $metric->getRiskLevel() . "\n";
            }

            $output .= "\n";
        }

        $output .= "Classes Above Threshold (" . $this->config->scoreThreshold . "): " . $aboveThresholdCount . "\n";

        return $output;
    }
}
