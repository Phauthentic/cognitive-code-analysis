<?php

declare(strict_types=1);

namespace Phauthentic\CognitiveCodeAnalysis\Tests\Unit\Command;

use Phauthentic\CognitiveCodeAnalysis\Application;
use Phauthentic\CognitiveCodeAnalysis\CognitiveAnalysisException;
use Phauthentic\CognitiveCodeAnalysis\Command\ChurnCommand;
use PHPUnit\Framework\Attributes\DataProvider;
use PHPUnit\Framework\Attributes\Test;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Tester\CommandTester;

/**
 *
 */
class ChurnCommandTest extends TestCase
{
    #[Test]
    public function testAnalyseNonExistentPath(): void
    {
        $this->expectException(CognitiveAnalysisException::class);
        $this->expectExceptionMessage('Path does not exist: does-not-exist');

        $application = new Application();
        $command = $application->getContainer()->get(ChurnCommand::class);
        $tester = new CommandTester($command);

        $tester->execute([
            'path' => 'does-not-exist',
        ]);
    }

    #[Test]
    public function testChurnSuccessfully(): void
    {
        $application = new Application();
        $command = $application->getContainer()->get(ChurnCommand::class);
        $tester = new CommandTester($command);

        $tester->execute([
            'path' => __DIR__ . '/../../../src',
        ]);

        $this->assertEquals(Command::SUCCESS, $tester->getStatusCode(), 'Command should succeed');
    }

    #[Test]
    #[DataProvider('reportDataProvider')]
    public function testAnalyseWithJsonReport(array $input, int $returnCode): void
    {
        $tmpDir = sys_get_temp_dir();
        $file = $tmpDir . '/churn-metrics.json';
        $application = new Application();
        $command = $application->getContainer()->get(ChurnCommand::class);
        $tester = new CommandTester($command);

        $tester->execute(
            input: $input
        );

        $this->assertEquals($returnCode, $tester->getStatusCode());

        if ($returnCode === Command::SUCCESS) {
            $this->assertFileExists($file);
        } else {
            $this->assertFileDoesNotExist($file);
        }

        unlink($file);
    }

    public static function reportDataProvider(): array
    {
        $tmpDir = sys_get_temp_dir();
        $file = $tmpDir . '/churn-metrics.json';

        return [
            'Successful Report Generation' => [
                'input' => [
                    'path' => __DIR__ . '/../../../src',
                    '--report-type' => 'json',
                    '--report-file' => $file,
                ],
                'returnCode' => Command::SUCCESS,
            ],
            'Invalid Report Type' => [
                'input' => [
                    'path' => __DIR__ . '/../../../src',
                    '--report-type' => 'invalid-type',
                    '--report-file' => $file,
                ],
                'returnCode' => Command::FAILURE,
            ],
            'Missing Report Option' => [
                'input' => [
                    'path' => __DIR__ . '/../../../src',
                    '--report-file' => $file,
                ],
                'returnCode' => Command::FAILURE,
            ],
            'Missing Report File Option' => [
                'input' => [
                    'path' => __DIR__ . '/../../../src',
                    '--report-type' => 'json',
                ],
                'returnCode' => Command::FAILURE,
            ]
        ];
    }

    #[Test]
    public function testAnalyseWithCustomChurnTextReporter(): void
    {
        $application = new Application();
        $command = $application->getContainer()->get(ChurnCommand::class);
        $tester = new CommandTester($command);

        $tempOutputFile = tempnam(sys_get_temp_dir(), 'custom_churn_report_') . '.txt';

        $tester->execute([
            'path' => __DIR__ . '/../../../tests/TestCode',
            '--config' => __DIR__ . '/../../../tests/Fixtures/custom-churn-text-reporter-config.yml',
            '--report-type' => 'customchurn',
            '--report-file' => $tempOutputFile,
        ]);

        // Debug: Show the actual output and status
        if ($tester->getStatusCode() !== Command::SUCCESS) {
            echo "Command failed with status: " . $tester->getStatusCode() . "\n";
            echo "Output: " . $tester->getDisplay() . "\n";
        }

        $this->assertEquals(Command::SUCCESS, $tester->getStatusCode(), 'Command should succeed with custom churn text reporter');
        $this->assertFileExists($tempOutputFile, 'Custom churn report file should be created');

        $content = file_get_contents($tempOutputFile);
        $this->assertNotEmpty($content, 'Report file should not be empty');
        $this->assertStringContainsString('=== Custom Churn Analysis Report ===', $content, 'Should contain report header');
        $this->assertStringContainsString('Generated by CustomChurnTextReporter', $content, 'Should contain reporter identification');
        $this->assertStringContainsString('Total Classes:', $content, 'Should contain summary');
        $this->assertStringContainsString('Total Methods:', $content, 'Should contain method count');

        // Verify that actual churn data is present
        $this->assertStringContainsString('Class:', $content, 'Should contain class information');
        $this->assertStringContainsString('File:', $content, 'Should contain file information');
        $this->assertStringContainsString('Times Changed:', $content, 'Should contain times changed information');
        $this->assertStringContainsString('Churn:', $content, 'Should contain churn information');

        unlink($tempOutputFile);
    }

    #[Test]
    public function testAnalyseWithConfigAwareChurnReporter(): void
    {
        $application = new Application();
        $command = $application->getContainer()->get(ChurnCommand::class);
        $tester = new CommandTester($command);

        $tempOutputFile = tempnam(sys_get_temp_dir(), 'config_aware_churn_report_') . '.txt';

        $tester->execute([
            'path' => __DIR__ . '/../../../tests/TestCode',
            '--config' => __DIR__ . '/../../../tests/Fixtures/config-aware-churn-reporter-config.yml',
            '--report-type' => 'configchurn',
            '--report-file' => $tempOutputFile,
        ]);

        $this->assertEquals(Command::SUCCESS, $tester->getStatusCode(), 'Command should succeed with config-aware churn reporter');
        $this->assertFileExists($tempOutputFile, 'Config-aware churn report file should be created');

        $content = file_get_contents($tempOutputFile);
        $this->assertNotEmpty($content, 'Config-aware churn report file should not be empty');
        $this->assertStringContainsString('=== Config-Aware Churn Analysis Report ===', $content, 'Should contain config-aware report header');
        $this->assertStringContainsString('Generated by ConfigAwareChurnTextReporter', $content, 'Should contain reporter identification');

        // Verify config information is included
        $this->assertStringContainsString('Configuration:', $content, 'Should contain configuration section');
        $this->assertStringContainsString('Score Threshold: 0.8', $content, 'Should contain score threshold from config');
        $this->assertStringContainsString('Group By Class: Yes', $content, 'Should contain group by class setting');
        $this->assertStringContainsString('Show Only Methods Exceeding Threshold: Yes', $content, 'Should contain threshold filtering setting');

        // Verify threshold-based analysis
        $this->assertStringContainsString('[ABOVE THRESHOLD]', $content, 'Should mark classes above threshold');
        $this->assertStringContainsString('Classes Above Threshold (0.8):', $content, 'Should count classes above threshold');

        unlink($tempOutputFile);
    }

    #[Test]
    public function testAnalyseWithInvalidCustomChurnReporter(): void
    {
        $application = new Application();
        $command = $application->getContainer()->get(ChurnCommand::class);
        $tester = new CommandTester($command);

        $tempOutputFile = tempnam(sys_get_temp_dir(), 'invalid_custom_churn_report_') . '.txt';

        $tester->execute([
            'path' => __DIR__ . '/../../../tests/TestCode',
            '--config' => __DIR__ . '/../../../tests/Fixtures/custom-churn-text-reporter-config.yml',
            '--report-type' => 'nonexistent',
            '--report-file' => $tempOutputFile,
        ]);

        $this->assertEquals(Command::FAILURE, $tester->getStatusCode(), 'Command should fail with invalid custom churn reporter');
        $this->assertFileDoesNotExist($tempOutputFile, 'Report file should not be created for invalid reporter');

        // Note: Error messages are written to stderr, which CommandTester doesn't capture by default
    }
}
